#ifndef Adafruit_NeoTrellisM4
#include <Adafruit_NeoTrellisM4.h>
#endif

#define NUM_PIXELS 32
#define rgb(r, g, b) ((r << 16) | (g << 8) | b)
#define TURQUOISE rgb(64, 224, 208)
#define STEEL rgb(70, 130, 180)
#define RED rgb(220, 20, 60)
#define BLACK 0

/*
 | 00 | 01 | 02 | 03 | 04 | 05 | 06 | 07 |
 | 08 | 09 | 10 | 11 | 12 | 13 | 14 | 15 |
 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 |
 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 |
*/

bool note_pattern[13][32] = {
    {0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,},
    {1, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,},
    {1, 1, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,},
    {1, 1, 1, 0, 0, 0, 0, 0,
     1, 0, 0, 0, 0, 0, 0, 0,
     1, 0, 0, 0, 0, 0, 0, 0,
     1, 0, 0, 0, 0, 0, 0, 0,},
    {0, 1, 1, 1, 0, 0, 0, 0,
     0, 1, 0, 0, 0, 0, 0, 0,
     1, 1, 0, 0, 0, 0, 0, 0,
     1, 1, 0, 0, 0, 0, 0, 0,},
    {0, 0, 1, 1, 1, 0, 0, 0,
     0, 0, 1, 0, 0, 0, 0, 0,
     0, 1, 1, 0, 0, 0, 0, 0,
     0, 1, 1, 0, 0, 0, 0, 0,},
    {0, 0, 0, 1, 1, 1, 0, 0,
     0, 0, 0, 1, 0, 0, 0, 0,
     0, 0, 1, 1, 0, 0, 0, 0,
     0, 0, 1, 1, 0, 0, 0, 0,},
    {0, 0, 0, 0, 1, 1, 1, 0,
     0, 0, 0, 0, 1, 0, 0, 0,
     0, 0, 0, 1, 1, 0, 0, 0,
     0, 0, 0, 1, 1, 0, 0, 0,},
    {0, 0, 0, 0, 0, 1, 1, 1,
     0, 0, 0, 0, 0, 1, 0, 0,
     0, 0, 0, 0, 1, 1, 0, 0,
     0, 0, 0, 0, 1, 1, 0, 0,},
    {0, 0, 0, 0, 0, 0, 1, 1,
     0, 0, 0, 0, 0, 0, 1, 0,
     0, 0, 0, 0, 0, 1, 1, 0,
     0, 0, 0, 0, 0, 1, 1, 0,},
    {0, 0, 0, 0, 0, 0, 0, 1,
     0, 0, 0, 0, 0, 0, 0, 1,
     0, 0, 0, 0, 0, 0, 1, 1,
     0, 0, 0, 0, 0, 0, 1, 1,},
    {0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 1,
     0, 0, 0, 0, 0, 0, 0, 1,},
    {0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,},
};

bool config_pattern[11][32] = {
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,1,1,0,0,0,},
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,1,1,0,0,0,
     0,0,1,1,1,1,0,0,},
    {0,0,0,0,0,0,0,0,
     0,0,0,1,1,0,0,0,
     0,0,1,1,1,1,0,0,
     0,1,1,0,0,1,1,0,},
    {0,0,0,1,1,0,0,0,
     0,0,1,1,1,1,0,0,
     0,1,1,0,0,1,1,0,
     0,1,1,0,0,1,1,0,},
    {0,0,1,1,1,1,0,0,
     0,1,1,0,0,1,1,0,
     0,1,1,0,0,1,1,0,
     0,0,1,1,1,1,0,0,},
    {0,1,1,0,0,1,1,0,
     0,1,1,0,0,1,1,0,
     0,0,1,1,1,1,0,0,
     0,0,0,1,1,0,0,0,},
    {0,1,1,0,0,1,1,0,
     0,0,1,1,1,1,0,0,
     0,0,0,1,1,0,0,0,
     0,0,0,0,0,0,0,0,},
    {0,0,1,1,1,1,0,0,
     0,0,0,1,1,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
    {0,0,0,1,1,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
};

bool twenty_four[10][32] = {
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     1,1,1,0,0,1,0,1,},
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     1,1,1,0,0,1,0,1,
     0,0,1,0,0,1,0,1,},
    {0,0,0,0,0,0,0,0,
     1,1,1,0,0,1,0,1,
     0,0,1,0,0,1,0,1,
     0,1,0,0,0,1,1,1,},
    {1,1,1,0,0,0,0,0,
     0,0,1,0,0,1,0,1,
     0,1,0,0,0,1,0,1,
     1,0,0,0,0,1,1,1,},
    {0,0,1,0,0,1,0,1,
     0,1,0,0,0,1,1,1,
     1,0,0,0,0,0,0,1,
     1,1,1,0,0,0,0,1,},
    {0,1,0,0,0,1,1,1,
     1,0,0,0,0,0,0,1,
     1,1,1,0,0,0,0,1,
     0,0,0,0,0,0,0,0,},
    {1,0,0,0,0,0,0,1,
     1,1,1,0,0,0,0,1,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
    {1,1,1,0,0,0,0,1,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
};

bool thirty_six[10][32] = {
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     1,1,1,0,0,1,1,1,},
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     1,1,1,0,0,1,1,1,
     0,0,1,0,0,1,0,0,},
    {0,0,0,0,0,0,0,0,
     1,1,1,0,0,1,1,1,
     0,0,1,0,0,1,0,0,
     0,1,1,0,0,1,1,1,},
    {1,1,1,0,0,1,1,1,
     0,0,1,0,0,1,0,0,
     0,1,1,0,0,1,1,1,
     0,0,1,0,0,1,0,1,},
    {0,0,1,0,0,1,0,0,
     0,1,1,0,0,1,1,1,
     0,0,1,0,0,1,0,1,
     1,1,1,0,0,1,1,1,},
    {0,1,1,0,0,1,0,1,
     0,0,1,0,0,1,1,1,
     1,1,1,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
    {0,0,1,0,0,1,0,1,
     1,1,1,0,0,1,1,1,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
    {1,1,1,0,0,1,1,1,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
    {0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,},
};

void render(Adafruit_NeoTrellisM4 *trellis, bool *map, uint32_t on_color, uint32_t off_color)
{
    for (uint8_t i = 0; i < NUM_PIXELS; i++)
    {
        if (map[i]) 
        {
            trellis->setPixelColor(i, on_color);
        }
        else
        {
            trellis->setPixelColor(i, off_color);
        }
        trellis->show();
    }
}

void render_sequence(Adafruit_NeoTrellisM4 *trellis, bool map[][32], uint8_t len, uint32_t on_color, uint32_t off_color)
{
    for (uint8_t i = 0; i < len; i++)
    {
        render(trellis, map[i], on_color, off_color);
    }
}

void fill(Adafruit_NeoTrellisM4 *trellis, uint32_t color)
{
    for (int i = 0; i < 32; i++)
    {
        trellis->setPixelColor(i, color);
    }
    trellis->show();
}

void note_animation(Adafruit_NeoTrellisM4 *trellis, uint32_t color)
{
    render_sequence(trellis, note_pattern, 13, color, 0);
}

void thirty_six_animation(Adafruit_NeoTrellisM4 *trellis, uint32_t color)
{
    render_sequence(trellis, thirty_six, 10, color, 0);
}

void twenty_four_animation(Adafruit_NeoTrellisM4 *trellis, uint32_t color)
{
    render_sequence(trellis, twenty_four, 10, color, 0);
}

void config_animation(Adafruit_NeoTrellisM4 *trellis, uint32_t color)
{
    render_sequence(trellis, config_pattern, 11, color, 0);
}
